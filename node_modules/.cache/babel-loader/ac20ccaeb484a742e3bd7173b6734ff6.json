{"ast":null,"code":"var _jsxFileName = \"/Users/turbanator/Desktop/FRONTEND/ReactJS/weather-app/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport { Weather } from './Weather.js';\nimport { Form } from './Form';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\"; // api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_Key = \"e4ae41adf2c5e12fd01e7d271fbf4d54\";\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.Getweather = async e => {\n      e.preventDefault();\n      const city = e.target.elements.city.value;\n      const country = e.target.elements.country.value;\n      const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_Key}`);\n      const response = await api_call.json();\n      console.log(response);\n      this.setState({\n        country: response.sys.country,\n        city: response.name,\n        celsius: this.calcCelsius(response.main.temp),\n        Temp_min: this.calcCelsius(response.main.temp_min),\n        Temp_max: this.calcCelsius(response.main.temp_max),\n        Description: response.weather[0].description\n      });\n      this.get_Weathericon(this.weatherIcon, response.weather[0].id);\n    };\n\n    this.state = {\n      city: undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      Temp_max: undefined,\n      Temp_min: undefined,\n      Description: \"\",\n      error: false\n    }; // this.Getweather();\n\n    this.weatherIcon = {\n      Thunderstorm: \"wi-thunderstorm\",\n      Drizzle: \"wi-sleet\",\n      Rain: \"wi-strom-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds: \"wi-day-fog\"\n    };\n  }\n\n  calcCelsius(temp) {\n    let cel = Math.floor(temp - 273.5);\n    return cel;\n  }\n\n  get_Weathericon(icons, rangeId) {\n    switch (true) {\n      case rangeId >= 200 && rangeId <= 232:\n        this.setState({\n          icon: this.weatherIcon.Thunderstorm\n        });\n        break;\n\n      case rangeId >= 300 && rangeId <= 321:\n        this.setState({\n          icon: this.weatherIcon.Drizzle\n        });\n        break;\n\n      case rangeId >= 500 && rangeId <= 531:\n        this.setState({\n          icon: this.weatherIcon.Rain\n        });\n        break;\n\n      case rangeId >= 600 && rangeId <= 622:\n        this.setState({\n          icon: this.weatherIcon.Snow\n        });\n        break;\n\n      case rangeId >= 701 && rangeId <= 781:\n        this.setState({\n          icon: this.weatherIcon.Atmosphere\n        });\n        break;\n\n      case rangeId == 800:\n        this.setState({\n          icon: this.weatherIcon.Clear\n        });\n        break;\n\n      case rangeId >= 801 && rangeId <= 804:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n        break;\n\n      default:\n        this.setState({\n          icon: this.weatherIcon.Clouds\n        });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        loadweather: this.Getweather\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Weather, {\n        country: this.state.country,\n        city: this.state.city,\n        celsius: this.state.celsius,\n        Temp_min: this.state.Temp_min,\n        Temp_max: this.state.Temp_max,\n        Description: this.state.Description,\n        weatherIcon: this.state.icon\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/turbanator/Desktop/FRONTEND/ReactJS/weather-app/src/App.js"],"names":["React","Component","Weather","Form","API_Key","App","constructor","Getweather","e","preventDefault","city","target","elements","value","country","api_call","fetch","response","json","console","log","setState","sys","name","celsius","calcCelsius","main","temp","Temp_min","temp_min","Temp_max","temp_max","Description","weather","description","get_Weathericon","weatherIcon","id","state","undefined","icon","error","Thunderstorm","Drizzle","Rain","Snow","Atmosphere","Clear","Clouds","cel","Math","floor","icons","rangeId","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,SAASC,OAAT,QAAwB,cAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,OAAO,sCAAP;AACA,OAAO,qCAAP,C,CAEA;;;AACA,MAAMC,OAAO,GAAC,kCAAd;;AAGA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAC1BK,EAAAA,WAAW,GAAG;AACZ;;AADY,SA6DdC,UA7Dc,GA6DF,MAAMC,CAAN,IAAW;AACrBA,MAAAA,CAAC,CAACC,cAAF;AACA,YAAMC,IAAI,GAACF,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBF,IAAlB,CAAuBG,KAAlC;AACA,YAAMC,OAAO,GAACN,CAAC,CAACG,MAAF,CAASC,QAAT,CAAkBE,OAAlB,CAA0BD,KAAxC;AAEA,YAAME,QAAQ,GAAG,MAAMC,KAAK,CAAE,oEAAmEZ,OAAQ,EAA7E,CAA5B;AACA,YAAMa,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AAEA,WAAKI,QAAL,CAAc;AACZP,QAAAA,OAAO,EAACG,QAAQ,CAACK,GAAT,CAAaR,OADT;AAEZJ,QAAAA,IAAI,EAACO,QAAQ,CAACM,IAFF;AAGZC,QAAAA,OAAO,EAAC,KAAKC,WAAL,CAAiBR,QAAQ,CAACS,IAAT,CAAcC,IAA/B,CAHI;AAIZC,QAAAA,QAAQ,EAAE,KAAKH,WAAL,CAAiBR,QAAQ,CAACS,IAAT,CAAcG,QAA/B,CAJE;AAKZC,QAAAA,QAAQ,EAAE,KAAKL,WAAL,CAAiBR,QAAQ,CAACS,IAAT,CAAcK,QAA/B,CALE;AAMZC,QAAAA,WAAW,EAAEf,QAAQ,CAACgB,OAAT,CAAiB,CAAjB,EAAoBC;AANrB,OAAd;AAUA,WAAKC,eAAL,CAAqB,KAAKC,WAA1B,EAAsCnB,QAAQ,CAACgB,OAAT,CAAiB,CAAjB,EAAoBI,EAA1D;AACD,KAjFa;;AAGZ,SAAKC,KAAL,GAAa;AACX5B,MAAAA,IAAI,EAAC6B,SADM;AAEXzB,MAAAA,OAAO,EAAEyB,SAFE;AAGXC,MAAAA,IAAI,EAAED,SAHK;AAIXb,MAAAA,IAAI,EAAEa,SAJK;AAKXf,MAAAA,OAAO,EAAEe,SALE;AAMXT,MAAAA,QAAQ,EAAES,SANC;AAOXX,MAAAA,QAAQ,EAAEW,SAPC;AAQXP,MAAAA,WAAW,EAAE,EARF;AASXS,MAAAA,KAAK,EAAC;AATK,KAAb,CAHY,CAcZ;;AACA,SAAKL,WAAL,GAAiB;AACfM,MAAAA,YAAY,EAAC,iBADE;AAEfC,MAAAA,OAAO,EAAC,UAFO;AAGfC,MAAAA,IAAI,EAAC,kBAHU;AAIfC,MAAAA,IAAI,EAAE,SAJS;AAKfC,MAAAA,UAAU,EAAE,QALG;AAMfC,MAAAA,KAAK,EAAE,cANQ;AAOfC,MAAAA,MAAM,EAAC;AAPQ,KAAjB;AASD;;AAEDvB,EAAAA,WAAW,CAACE,IAAD,EACX;AACE,QAAIsB,GAAG,GAACC,IAAI,CAACC,KAAL,CAAWxB,IAAI,GAAC,KAAhB,CAAR;AACA,WAAOsB,GAAP;AACD;;AAEDd,EAAAA,eAAe,CAACiB,KAAD,EAAOC,OAAP,EACf;AACE,YAAO,IAAP;AACE,WAAKA,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBM;AAAvB,SAAd;AACA;;AACF,WAAKW,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBO;AAAvB,SAAd;AACA;;AACF,WAAKU,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBQ;AAAvB,SAAd;AACA;;AACF,WAAKS,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBS;AAAvB,SAAd;AACA;;AACF,WAAKQ,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBU;AAAvB,SAAd;AACA;;AACF,WAAKO,OAAO,IAAE,GAAd;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBW;AAAvB,SAAd;AACA;;AACF,WAAKM,OAAO,IAAE,GAAT,IAAgBA,OAAO,IAAE,GAA9B;AACE,aAAKhC,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBY;AAAvB,SAAd;AACA;;AACF;AACE,aAAK3B,QAAL,CAAc;AAACmB,UAAAA,IAAI,EAAC,KAAKJ,WAAL,CAAiBY;AAAvB,SAAd;AAvBJ;AAyBD;;AAuBDM,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,WAAW,EAAE,KAAK/C;AAAxB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,OAAD;AAAS,QAAA,OAAO,EAAE,KAAK+B,KAAL,CAAWxB,OAA7B;AAAsC,QAAA,IAAI,EAAE,KAAKwB,KAAL,CAAW5B,IAAvD;AACA,QAAA,OAAO,EAAE,KAAK4B,KAAL,CAAWd,OADpB;AAEA,QAAA,QAAQ,EAAE,KAAKc,KAAL,CAAWV,QAFrB;AAGA,QAAA,QAAQ,EAAE,KAAKU,KAAL,CAAWR,QAHrB;AAIA,QAAA,WAAW,EAAE,KAAKQ,KAAL,CAAWN,WAJxB;AAKA,QAAA,WAAW,EAAE,KAAKM,KAAL,CAAWE;AALxB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AAjGyB;;AAsG5B,eAAenC,GAAf","sourcesContent":["import React, { Component } from 'react'\nimport './App.css';\nimport { Weather } from './Weather.js';\nimport { Form } from './Form';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"weather-icons/css/weather-icons.css\"\n\n// api.openweathermap.org/data/2.5/weather?q=London,uk&appid={API key}\nconst API_Key=\"e4ae41adf2c5e12fd01e7d271fbf4d54\";\n\n\nclass App extends Component {\n  constructor() {\n    super()\n  \n    this.state = {\n      city:undefined,\n      country: undefined,\n      icon: undefined,\n      main: undefined,\n      celsius: undefined,\n      Temp_max: undefined,\n      Temp_min: undefined,\n      Description: \"\",\n      error:false \n    }\n    // this.Getweather();\n    this.weatherIcon={\n      Thunderstorm:\"wi-thunderstorm\",\n      Drizzle:\"wi-sleet\",\n      Rain:\"wi-strom-showers\",\n      Snow: \"wi-snow\",\n      Atmosphere: \"wi-fog\",\n      Clear: \"wi-day-sunny\",\n      Clouds:\"wi-day-fog\"\n    };\n  }\n  \n  calcCelsius(temp)\n  {\n    let cel=Math.floor(temp-273.5);\n    return cel;\n  }\n\n  get_Weathericon(icons,rangeId)\n  {\n    switch(true){\n      case rangeId>=200 && rangeId<=232:\n        this.setState({icon:this.weatherIcon.Thunderstorm});\n        break;\n      case rangeId>=300 && rangeId<=321:\n        this.setState({icon:this.weatherIcon.Drizzle});\n        break;\n      case rangeId>=500 && rangeId<=531:\n        this.setState({icon:this.weatherIcon.Rain});\n        break;\n      case rangeId>=600 && rangeId<=622:\n        this.setState({icon:this.weatherIcon.Snow});\n        break;\n      case rangeId>=701 && rangeId<=781:\n        this.setState({icon:this.weatherIcon.Atmosphere});\n        break;\n      case rangeId==800:\n        this.setState({icon:this.weatherIcon.Clear});\n        break;\n      case rangeId>=801 && rangeId<=804:\n        this.setState({icon:this.weatherIcon.Clouds});\n        break;\n      default:\n        this.setState({icon:this.weatherIcon.Clouds}); \n    }\n  }\n\n  Getweather= async(e) =>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n\n    const api_call = await fetch(`http://api.openweathermap.org/data/2.5/weather?q=London,uk&appid=${API_Key}`)\n    const response = await api_call.json();\n    console.log(response);\n    \n    this.setState({\n      country:response.sys.country,\n      city:response.name,\n      celsius:this.calcCelsius(response.main.temp),\n      Temp_min: this.calcCelsius(response.main.temp_min),\n      Temp_max: this.calcCelsius(response.main.temp_max),\n      Description: response.weather[0].description,\n      \n\n    });\n    this.get_Weathericon(this.weatherIcon,response.weather[0].id);\n  }; \n  render() {\n    return (\n      <div className=\"App\">\n          <Form loadweather={this.Getweather}/>\n          <Weather country={this.state.country} city={this.state.city}\n          celsius={this.state.celsius}\n          Temp_min={this.state.Temp_min}\n          Temp_max={this.state.Temp_max}\n          Description={this.state.Description}\n          weatherIcon={this.state.icon}\n          />\n          \n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}